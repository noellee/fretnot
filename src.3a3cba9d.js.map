{"version":3,"sources":["node_modules/@fretnot/fretboard/node_modules/canvas/lib/parse-font.js","node_modules/@fretnot/fretboard/node_modules/canvas/browser.js","node_modules/@fretnot/fretboard/src/geometry.ts","node_modules/@fretnot/fretboard/src/index.ts","src/index.ts"],"names":["weights","styles","variants","stretches","units","string","weightRe","RegExp","styleRe","variantRe","stretchRe","sizeFamilyRe","cache","defaultHeight","module","exports","str","sizeFamily","exec","font","weight","style","variant","stretch","size","parseFloat","unit","family","replace","substr","substring","index","parseFont","require","createCanvas","width","height","Object","assign","document","createElement","createImageData","array","arguments","length","ImageData","loadImage","src","options","Promise","resolve","reject","image","cleanup","onload","onerror","Error"],"mappings":"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","file":"src.3a3cba9d.js","sourceRoot":"..","sourcesContent":["'use strict'\n\n/**\n * Font RegExp helpers.\n */\n\nconst weights = 'bold|bolder|lighter|[1-9]00'\n  , styles = 'italic|oblique'\n  , variants = 'small-caps'\n  , stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'\n  , units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q'\n  , string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'\n\n// [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\nconst weightRe = new RegExp('(' + weights + ') +', 'i')\nconst styleRe = new RegExp('(' + styles + ') +', 'i')\nconst variantRe = new RegExp('(' + variants + ') +', 'i')\nconst stretchRe = new RegExp('(' + stretches + ') +', 'i')\nconst sizeFamilyRe = new RegExp(\n  '([\\\\d\\\\.]+)(' + units + ') *'\n  + '((?:' + string + ')( *, *(?:' + string + '))*)')\n\n/**\n * Cache font parsing.\n */\n\nconst cache = {}\n\nconst defaultHeight = 16 // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = function (str) {\n  // Cached\n  if (cache[str]) return cache[str]\n\n  // Try for required properties first.\n  const sizeFamily = sizeFamilyRe.exec(str)\n  if (!sizeFamily) return // invalid\n\n  // Default values and required properties\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }\n\n  // Optional, unordered properties.\n  let weight, style, variant, stretch\n  // Stop search at `sizeFamily.index`\n  let substr = str.substring(0, sizeFamily.index)\n  if ((weight = weightRe.exec(substr))) font.weight = weight[1]\n  if ((style = styleRe.exec(substr))) font.style = style[1]\n  if ((variant = variantRe.exec(substr))) font.variant = variant[1]\n  if ((stretch = stretchRe.exec(substr))) font.stretch = stretch[1]\n\n  // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75\n      break\n    case 'pc':\n      font.size *= 16\n      break\n    case 'in':\n      font.size *= 96\n      break\n    case 'cm':\n      font.size *= 96.0 / 2.54\n      break\n    case 'mm':\n      font.size *= 96.0 / 25.4\n      break\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75\n      break\n    case 'q':\n      font.size *= 96 / 25.4 / 4\n      break\n  }\n\n  return (cache[str] = font)\n}\n","/* globals document, ImageData */\n\nconst parseFont = require('./lib/parse-font')\n\nexports.parseFont = parseFont\n\nexports.createCanvas = function (width, height) {\n  return Object.assign(document.createElement('canvas'), { width: width, height: height })\n}\n\nexports.createImageData = function (array, width, height) {\n  // Browser implementation of ImageData looks at the number of arguments passed\n  switch (arguments.length) {\n    case 0: return new ImageData()\n    case 1: return new ImageData(array)\n    case 2: return new ImageData(array, width)\n    default: return new ImageData(array, width, height)\n  }\n}\n\nexports.loadImage = function (src, options) {\n  return new Promise(function (resolve, reject) {\n    const image = Object.assign(document.createElement('img'), options)\n\n    function cleanup () {\n      image.onload = null\n      image.onerror = null\n    }\n\n    image.onload = function () { cleanup(); resolve(image) }\n    image.onerror = function () { cleanup(); reject(new Error('Failed to load the image \"' + src + '\"')) }\n\n    image.src = src\n  })\n}\n","export class Point {\n  private readonly _x: number\n  private readonly _y: number\n\n  constructor (x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n\n  get x (): number {\n    return this._x\n  }\n\n  get y (): number {\n    return this._y\n  }\n\n  public plus (other: Point): Point {\n    return new Point(this.x + other.x, this.y + other.y)\n  }\n\n  public minus (other: Point): Point {\n    return this.plus(other.negate())\n  }\n\n  public negate (): Point {\n    return new Point(-this.x, -this.y)\n  }\n\n  public times (n: number): Point {\n    return new Point(this.x * n, this.y * n)\n  }\n\n  public dividedBy (n: number): Point {\n    return new Point(this.x / n, this.y / n)\n  }\n}\n\nexport class Circle {\n  public center: Point\n  public radius: number\n\n  constructor (center: Point, radius: number) {\n    this.center = center\n    this.radius = radius\n  }\n}\n\nexport class Line {\n  public p1: Point\n  public p2: Point\n\n  constructor (p1: Point, p2: Point) {\n    this.p1 = p1\n    this.p2 = p2\n  }\n\n  public plus (other: Line): Line {\n    return new Line(this.p1.plus(other.p1), this.p2.plus(other.p2))\n  }\n\n  public minus (other: Line): Line {\n    return this.plus(other.negate())\n  }\n\n  public negate (): Line {\n    return new Line(this.p1.negate(), this.p2.negate())\n  }\n\n  public times (n: number): Line {\n    return new Line(this.p1.times(n), this.p2.times(n))\n  }\n\n  public dividedBy (n: number): Line {\n    return new Line(this.p1.dividedBy(n), this.p2.dividedBy(n))\n  }\n}\n\nexport class Rect {\n  private readonly _topLeft: Point\n  private readonly _bottomRight: Point\n\n  constructor (topLeft: Point, bottomRight: Point) {\n    this._topLeft = topLeft\n    this._bottomRight = bottomRight\n  }\n\n  get topLeft (): Point {\n    return this._topLeft\n  }\n\n  get bottomRight (): Point {\n    return this._bottomRight\n  }\n\n  get topRight (): Point {\n    return new Point(this._bottomRight.x, this._topLeft.y)\n  }\n\n  get bottomLeft (): Point {\n    return new Point(this.topLeft.x, this._bottomRight.y)\n  }\n\n  get topLine (): Line {\n    return new Line(this.topLeft, this.topRight)\n  }\n\n  get bottomLine (): Line {\n    return new Line(this.bottomLeft, this.bottomRight)\n  }\n\n  get leftLine (): Line {\n    return new Line(this.topLeft, this.bottomLeft)\n  }\n\n  get rightLine (): Line {\n    return new Line(this.topRight, this.bottomRight)\n  }\n}\n\nexport function createEvenlySpacedLines (line1: Line, line2: Line, nInclusive: number): Line[] {\n  const n = nInclusive - 1\n  const delta1 = line2.p1.minus(line1.p1).dividedBy(n)\n  const delta2 = line2.p2.minus(line1.p2).dividedBy(n)\n  const lineDelta = new Line(delta1, delta2)\n  const lines = []\n  for (var i = 0; i <= n; i++) {\n    lines.push(line1.plus(lineDelta.times(i)))\n  }\n  return lines\n}\n","import { createCanvas, Canvas } from 'canvas'\nimport { Point, Line, Rect, createEvenlySpacedLines, Circle } from './geometry'\n\ntype Fret = 'x' | number\n\nexport interface FretboardOptions {\n  title: string\n  frets: Fret[]\n  startingFret: number\n  bgColor: string\n}\n\nfunction drawLine (ctx: CanvasRenderingContext2D, line: Line): void {\n  ctx.beginPath()\n  ctx.lineTo(line.p1.x, line.p1.y)\n  ctx.lineTo(line.p2.x, line.p2.y)\n  ctx.stroke()\n}\n\nfunction drawCircle (ctx: CanvasRenderingContext2D, circle: Circle, fill: boolean = true): void {\n  ctx.beginPath()\n  ctx.arc(circle.center.x, circle.center.y, circle.radius, 0, 2 * Math.PI)\n  ctx.fill()\n  ctx.stroke()\n}\n\nexport class Fretboard {\n  private _frets: Fret[] = []\n\n  constructor (frets: string | Fret[]) {\n    this.setFrets(frets)\n  }\n\n  get frets (): Fret[] {\n    return this._frets\n  }\n\n  setFrets (frets: string | Fret[]): Fretboard {\n    if (typeof frets === 'string') {\n      this._frets = Fretboard.parseFrets(frets)\n    } else {\n      this._frets = frets\n    }\n    return this\n  }\n\n  static parseFrets (frets: string): Fret[] {\n    const fs = frets.includes(',') ? frets.split(',') : frets.split('')\n    return fs.map(f => parseInt(f, 10)).map(f => isNaN(f) ? 'x' : f)\n  }\n\n  beginDrawing (): FretboardDrawingBuilder {\n    return new FretboardDrawingBuilder(this)\n  }\n}\n\ntype BackgroundStyle = string\n\nclass FretboardDrawingBuilder {\n  private readonly _freboard: Fretboard\n\n  private _background: BackgroundStyle = 'transparent'\n  private _title: string = ''\n  private _startingFret: number = 1\n\n  constructor (freboard: Fretboard) {\n    this._freboard = freboard\n  }\n\n  withBackground (background: BackgroundStyle): FretboardDrawingBuilder {\n    this._background = background\n    return this\n  }\n\n  withTitle (title: string): FretboardDrawingBuilder {\n    this._title = title\n    return this\n  }\n\n  fromFret (startingFret: number): FretboardDrawingBuilder {\n    this._startingFret = Math.max(startingFret, 1)\n    return this\n  }\n\n  toPng (): NodeJS.ReadableStream {\n    const canvas = this._createCanvas()\n    return this._draw(canvas).createPNGStream()\n  }\n\n  toJpeg (): NodeJS.ReadableStream {\n    const canvas = this._createCanvas()\n    return this._draw(canvas).createJPEGStream()\n  }\n\n  toSvg (): Buffer {\n    const canvas = this._createCanvas('svg')\n    return this._draw(canvas).toBuffer()\n  }\n\n  toDataUrl (): string {\n    const canvas = this._createCanvas()\n    return this._draw(canvas).toDataURL()\n  }\n\n  private _createCanvas (type?: 'svg' | undefined): Canvas {\n    return createCanvas(200, 280, type)\n  }\n\n  private _draw (canvas: Canvas): Canvas {\n    const ctx = canvas.getContext('2d')\n\n    const fretCount = 6\n    const stringCount = 6\n\n    const paddingLeft = 28\n    const paddingRight = 28\n    const paddingBottom = 28\n    const paddingTop = 80\n\n    // background\n    ctx.fillStyle = this._background\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n    // title\n    ctx.textAlign = 'center'\n    ctx.font = '30px Arial'\n    ctx.fillStyle = 'black'\n    ctx.fillText(this._title, 100, 45)\n\n    // fretboard\n    const topLeft = new Point(paddingLeft, paddingTop)\n    const bottomRight = new Point(canvas.width - paddingRight, canvas.height - paddingBottom)\n    const rect = new Rect(topLeft, bottomRight)\n\n    // nut\n    ctx.strokeStyle = 'black'\n    ctx.lineCap = 'square'\n    ctx.lineWidth = 6\n    drawLine(ctx, rect.topLine)\n\n    // strings\n    ctx.lineWidth = 2\n    const strings = createEvenlySpacedLines(rect.leftLine, rect.rightLine, stringCount)\n    strings.forEach(s => drawLine(ctx, s))\n\n    // frets\n    const fretLines = createEvenlySpacedLines(rect.topLine, rect.bottomLine, fretCount + 1)\n    fretLines.forEach(s => drawLine(ctx, s))\n\n    // fingers\n    const stringSpacing = (rect.topRight.x - rect.topLeft.x) / (stringCount - 1)\n    const fretSpacing = (rect.bottomLeft.y - rect.topLeft.y) / fretCount\n    const y = rect.topLeft.y\n\n    // shift frets\n    ctx.font = '20px Arial'\n    if (this._startingFret > 1) {\n      const oldTextBaseline = ctx.textBaseline\n      const oldtextAlign = ctx.textAlign\n      ctx.textAlign = 'right'\n      ctx.textBaseline = 'middle'\n      ctx.fillText(this._startingFret.toString(), rect.topLeft.x - 8, rect.topRight.y + fretSpacing / 2)\n      ctx.textBaseline = oldTextBaseline\n      ctx.textAlign = oldtextAlign\n    }\n    const frets = this._freboard.frets.map(f => f === 'x' ? f : Math.max(f - this._startingFret + 1, 0))\n\n    frets.forEach((fret, fretIdx) => {\n      const x = rect.topLeft.x + fretIdx * stringSpacing\n      if (fret === 'x') {\n        ctx.fillText('x', x, y - 10)\n      } else if (fret === 0) {\n        ctx.fillText('o', x, y - 10)\n      } else if (fret > 0) {\n        const center = new Point(x, y + fretSpacing * (fret - 0.5))\n        drawCircle(ctx, new Circle(center, fretSpacing * 0.3))\n      }\n    })\n\n    return canvas\n  }\n}\n","import { Fretboard } from '@fretnot/fretboard'\n\nfunction component (): HTMLElement {\n  const element = document.createElement('div')\n\n  const fretboard = new Fretboard('2xx232')\n  const dataUrl = fretboard\n    .beginDrawing()\n    .withTitle('D/F#')\n    .toDataUrl()\n  element.innerHTML = `<img src=\"${dataUrl}\"/>`\n\n  return element\n}\n\ndocument.body.appendChild(component())\n"]}